/* ENTITY UI */
enum eButtonId{}

class EntityUI
eButtonId;
visible;
is3D;
EntityUI(v2 size, const Material& material){
    mesh = new Mesh();
    mesh.createQuad(posxy, sizexy, true)
}

render(){
    if(!is3D) glDisable(DEPTH_TEST);
    glDisable(CULL_FACE);

// opcional (transpar√®ncia)
    glEnable(BLEND);
    glBlendFunc(SRC_ALPHA, ONE_MINUS_SRC_ALPHA);

    model, proj, color, mask

    if(is3D){
        float dist = clamp(world.camera.eye.distance(pos3d), 0, max_dist);
        this.mesh.createQuad(this.pos, this.size, true);
        mesh.render(GL_TRIANGLES);
    }

//Restore flags
    glEnable(CULL_FACE);
    glDisable(BLEND);
    glEnable(DEPTH_TEST);

}

basic, texture/flat

bool isHover() {
	Vector2 mouse_pos = Input::mouse_pos;
	if(buttonID == background) return false;
	if (mouse_pos.x ...) {
		// change texure to hover
		return true;
	}
}

//if isHover() && ismousepressed(SDL_MOUSE_LEFT)

void update3D(Vector3 enemy_position){
	this.visible = true;
	Vector3 ui_pos = Camera::current.project(enemy_position, Game::instance.window_width, Game::instance.window_heigth);
	if (ui_pos) {
		this.visible = false;
	}
}



/* HEALTHBAR.FS */

varying vec2 v_uv;

uniform float u_mask;
uniform vec4 u_color;

void main(){
    vec3 black = (0.1, 0.1, 0.1);
    vec3 final_color = green;
    vec3 green = (0.2, 0.9, 0.2);

    if(v_uv.x mask){
        final_color = black;
    }

    gl_FragColor = vec4(final_color, 1.0);
}



/* MINIMAP */
// redimensionar el viewport
glViewport(posxy, sizexy);

Matrix44 myay;
myaw.setRotation(camera_yaw, Vector(0, 1, 0))
// rotate the 

Camera minimapcamera = set perspective(60.f, 1.f, 0.1, 100.f);
Vector3 eye = current_player.model.gettranslation();
eye.y = 0.0f;
Vector3 center = eye;
Vector3 up(0, 0, 1);
Vector3 cameraheight = Vector3(0, 15, 0);
minimapcamera.lookat(eye + cameraheight, center, up);

camera.enable();
world.root.render(&minimapcamera);

// reset el viewport
glViewport(posxy, sizexy);